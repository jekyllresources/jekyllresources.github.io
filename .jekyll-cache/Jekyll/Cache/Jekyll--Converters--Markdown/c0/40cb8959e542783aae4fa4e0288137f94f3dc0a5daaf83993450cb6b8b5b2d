I"ß<p>Jekyll provides built-in support for <a href="https://sass-lang.com/">Sass</a>
and can work with <a href="https://coffeescript.org/">CoffeeScript</a> via a Ruby gem.
In order to use them, you must first create a file with the proper extension
name (one of <code class="language-plaintext highlighter-rouge">.sass</code>, <code class="language-plaintext highlighter-rouge">.scss</code>, or <code class="language-plaintext highlighter-rouge">.coffee</code>) and
<strong><em>start the file with two lines of triple dashes</em></strong>, like this:</p>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">---</span>
<span class="nt">---</span>

<span class="c1">// start content</span>
<span class="nc">.my-definition</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">1</span><span class="mi">.2em</span>
</code></pre></div></div>

<p>Jekyll treats these files the same as a regular page, in that the output file
will be placed in the same directory that it came from. For instance, if you
have a file named <code class="language-plaintext highlighter-rouge">css/styles.scss</code> in your siteâ€™s source folder, Jekyll
will process it and put it in your siteâ€™s destination folder under
<code class="language-plaintext highlighter-rouge">css/styles.css</code>.</p>

<div class="note info">
  <h5>Jekyll processes all Liquid filters and tags in asset files</h5>
  <p>If you are using <a href="https://mustache.github.io">Mustache</a>
     or another JavaScript templating language that conflicts with
     the <a href="/docs/templates/">Liquid template syntax</a>, you
     will need to place <code>{&#37; raw &#37;}</code> and
     <code>{&#37; endraw &#37;}</code> tags around your code.</p>
</div>

<h2 id="sassscss">Sass/SCSS</h2>

<p>Jekyll allows you to customize your Sass conversion in certain ways.</p>

<p>Place all your partials in your <code class="language-plaintext highlighter-rouge">sass_dir</code>, which defaults to
<code class="language-plaintext highlighter-rouge">&lt;source&gt;/_sass</code>. Place your main SCSS or Sass files in the place you want
them to be in the output file, such as <code class="language-plaintext highlighter-rouge">&lt;source&gt;/css</code>. For an example, take
a look at <a href="https://github.com/jekyll/jekyll-sass-converter/tree/master/docs">this example site using Sass support in Jekyll</a>.</p>

<p>If you are using Sass <code class="language-plaintext highlighter-rouge">@import</code> statements, youâ€™ll need to ensure that your
<code class="language-plaintext highlighter-rouge">sass_dir</code> is set to the base directory that contains your Sass files:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">sass</span><span class="pi">:</span>
    <span class="na">sass_dir</span><span class="pi">:</span> <span class="s">_sass</span>
</code></pre></div></div>

<p>The Sass converter will default the <code class="language-plaintext highlighter-rouge">sass_dir</code> configuration option to
<code class="language-plaintext highlighter-rouge">_sass</code>.</p>

<div class="note info">
  <h5>The <code>sass_dir</code> is only used by Sass</h5>
  <p>

    Note that the <code>sass_dir</code> becomes the load path for Sass imports,
    nothing more. This means that Jekyll does not know about these files
    directly. Any files here should not contain the empty front matter as
    described above. If they do, they'll not be transformed as described above. This
    folder should only contain imports.

  </p>
</div>

<p>You may also specify the output style with the <code class="language-plaintext highlighter-rouge">style</code> option in your
<code class="language-plaintext highlighter-rouge">_config.yml</code> file:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">sass</span><span class="pi">:</span>
    <span class="na">style</span><span class="pi">:</span> <span class="s">compressed</span>
</code></pre></div></div>

<p>These are passed to Sass, so any output style options Sass supports are valid
here, too.</p>

<h2 id="coffeescript">Coffeescript</h2>

<p>To enable Coffeescript in Jekyll 3.0 and up you must</p>

<ul>
  <li>Install the <code class="language-plaintext highlighter-rouge">jekyll-coffeescript</code> gem</li>
  <li>Ensure that your <code class="language-plaintext highlighter-rouge">_config.yml</code> is up-to-date and includes the following:</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">jekyll-coffeescript</span>
</code></pre></div></div>
:ET