I"(<p>A few things have changed in Jekyll 4.</p>

<p>Before we dive in, you need to have at least Ruby 2.5.0
installed.</p>

<p>Run the following in your terminal to check</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby <span class="nt">-v</span>
ruby 2.7.1p83 <span class="o">(</span>2020-03-31 revision a0c7c23c9c<span class="o">)</span>
</code></pre></div></div>

<p>If you’re using a supported Ruby version &gt;= 2.5.0, go ahead
and fetch the latest version of Jekyll:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem update jekyll
</code></pre></div></div>

<div class="note warning">
  <h5><code>post_url</code> Tag and Baseurl</h5>
  <p>&nbsp;</p>
  <p>
    The <code>post_url</code> tag now incorporates the <code>relative_url</code> filter within itself
    and therefore automatically prepends your site's <code>baseurl</code> to the post's <code>url</code>
    value.
  </p>
  <p>
    Please ensure that you change all instances of the <code>post_url</code> usage as following:
  </p>


<figure class="highlight"><pre><code class="language-diff" data-lang="diff"><span class="gd">- {{ site.baseurl }}/{% post_url 2018-03-20-hello-world.markdown %}
</span><span class="gi">+ {% post_url 2018-03-20-hello-world.markdown %}</span></code></pre></figure>

</div>

<h2 id="template-rendering">Template rendering</h2>

<p>We’ve slightly altered the way Jekyll parses and renders your various templates
to improve the overall build times. Jekyll now parses a template once, caches it
internally and then renders the parsed template multiple times as required by
your pages and documents.</p>

<p>The downside to this is that some of the community-authored plugins may not work
as they previously used to.</p>

<h2 id="static-files-in-unrendered-collections">Static files in unrendered collections</h2>

<p>Collections other than <code class="language-plaintext highlighter-rouge">posts</code> can contain static assets along with Markdown files.
But if the collection has not been configured with metadata <code class="language-plaintext highlighter-rouge">output: true</code>, then
neither its <em>documents</em> nor its <em>static assets</em> will be output to the destination
directory.</p>

<h2 id="for-plugin-authors">For plugin authors</h2>

<ul>
  <li>
    <p>If your plugin depends on the following code: <code class="language-plaintext highlighter-rouge">site.liquid_renderer.file(path).parse(content)</code>,
note that the return value (<code class="language-plaintext highlighter-rouge">template</code>, an instance of <em><code class="language-plaintext highlighter-rouge">Liquid::Template</code></em>), from that line will
always be the <strong>same object</strong> for a given <code class="language-plaintext highlighter-rouge">path</code>. <br />
The <em><code class="language-plaintext highlighter-rouge">template</code></em> instance is then rendered as previously, with respect to the <code class="language-plaintext highlighter-rouge">payload</code> passed to it.
You’ll therefore have to ensure that <em><code class="language-plaintext highlighter-rouge">payload</code></em> is not memoized or cached in your plugin instance.</p>
  </li>
  <li>
    <p>If its a requirement that <code class="language-plaintext highlighter-rouge">template</code> you get from the above step <em>be different</em> at all times,
you can invoke <em><code class="language-plaintext highlighter-rouge">Liquid::Template</code></em> directly:</p>

    <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- template = site.liquid_renderer.file(path).parse(content)
</span><span class="gi">+ template = Liquid::Template.parse(content)
</span></code></pre></div>    </div>
  </li>
</ul>

<h2 id="exclusion-changes">Exclusion changes</h2>

<p>We’ve enhanced our default exclusion array.
It now looks like the following:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># default excludes</span>
<span class="na">exclude</span><span class="pi">:</span>
<span class="pi">-</span> <span class="s">.sass-cache/</span>
<span class="pi">-</span> <span class="s">.jekyll-cache/</span>
<span class="pi">-</span> <span class="s">gemfiles/</span>
<span class="pi">-</span> <span class="s">Gemfile</span>
<span class="pi">-</span> <span class="s">Gemfile.lock</span>
<span class="pi">-</span> <span class="s">node_modules/</span>
<span class="pi">-</span> <span class="s">vendor/bundle/</span>
<span class="pi">-</span> <span class="s">vendor/cache/</span>
<span class="pi">-</span> <span class="s">vendor/gems/</span>
<span class="pi">-</span> <span class="s">vendor/ruby/</span>
</code></pre></div></div>

<p>What’s new is that this array <strong>does not get overridden by the <code class="language-plaintext highlighter-rouge">exclude</code> array
in the user’s config file anymore</strong>. The user’s exclude entries simply get
<strong>added</strong> to the above default array (if the entry isn’t already excluded).</p>

<p>To forcibly “process” directories or files that have been excluded, list them
in the <code class="language-plaintext highlighter-rouge">include</code> array instead:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># overrides your excluded items configuration and the default include array ([".htaccess"])</span>
<span class="na">include</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">.htaccess</span>
  <span class="pi">-</span> <span class="s">node_modules/uglifier/index.js</span>
</code></pre></div></div>

<p>The above configuration directs Jekyll to handle only
<code class="language-plaintext highlighter-rouge">node_modules/uglifier/index.js</code> while ignoring every other file in the
<code class="language-plaintext highlighter-rouge">node_modules</code> directory since that directory is “excluded” by default.</p>

<p>Note that the default <code class="language-plaintext highlighter-rouge">include</code> array still gets overridden by the <code class="language-plaintext highlighter-rouge">include</code>
array in your config file. So, be sure to add <code class="language-plaintext highlighter-rouge">.htaccess</code> to the list if you
need that file to be present in the generated site.</p>

<h2 id="kramdown-v2">Kramdown v2</h2>

<p>Jekyll has dropped support for <code class="language-plaintext highlighter-rouge">kramdown-1.x</code> entirely.</p>

<p>From <a href="https://kramdown.gettalong.org/news.html#kramdown-200-released"><code class="language-plaintext highlighter-rouge">v2.0</code> onwards</a>
kramdown requires specific extensions to be additionally installed to use
certain features are desired outside of kramdown’s core functionality.</p>

<p>Out of all the extensions listed in the report linked above, gem
<code class="language-plaintext highlighter-rouge">kramdown-parser-gfm</code> is automatically installed along with Jekyll 4.0. The
remaining extensions will have to be manually installed by the user depending on
desired funtionality, by listing the extension’s gem-name in their <code class="language-plaintext highlighter-rouge">Gemfile</code>.</p>

<p>Notes:</p>
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">kramdown-converter-pdf</code> will be ignored by Jekyll Core. To have Jekyll convert Markdown to PDF
you’ll have to depend on a plugin that subclasses <code class="language-plaintext highlighter-rouge">Jekyll::Converter</code> with the
<a href="/docs/plugins/converters/">required methods</a>.</p>

    <p>For example:</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Jekyll</span>
  <span class="no">External</span><span class="p">.</span><span class="nf">require_with_graceful_fail</span> <span class="s2">"kramdown-converter-pdf"</span>

  <span class="k">class</span> <span class="nc">Markdown2PDF</span> <span class="o">&lt;</span> <span class="no">Converter</span>
    <span class="n">safe</span> <span class="kp">true</span>
    <span class="n">priority</span> <span class="ss">:low</span>

    <span class="k">def</span> <span class="nf">matches</span><span class="p">(</span><span class="n">ext</span><span class="p">)</span>
      <span class="c1"># match only files that have an extension exactly ".markdown"</span>
      <span class="n">ext</span> <span class="o">=~</span> <span class="sr">/^\.markdown$/</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
      <span class="no">Kramdown</span><span class="o">::</span><span class="no">Document</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">content</span><span class="p">).</span><span class="nf">to_pdf</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">output_ext</span>
      <span class="s2">".pdf"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Vendors that provide a versioned Jekyll Environment Image (e.g. Docker Image, GitHub Pages, etc)
will have to manually whitelist kramdown’s extension gems in their distributions for Jekyll 4.0.</p>
  </li>
</ul>

<h2 id="deprecated-configuration-options">Deprecated Configuration Options</h2>

<p>Jekyll 4.0 has dropped support for all legacy configuration options that were deprecated over multiple
releases in the previous series.</p>

<p>To that end, we shall no longer output a deprecation warning when we encounter a legacy config key nor
shall we gracefully assign their values to the newer counterparts. Depending on the key, it shall either
be ignored or raise an <code class="language-plaintext highlighter-rouge">InvalidConfigurationError</code> error if the key is still valid but the associated
value is not of the valid type.</p>
:ET