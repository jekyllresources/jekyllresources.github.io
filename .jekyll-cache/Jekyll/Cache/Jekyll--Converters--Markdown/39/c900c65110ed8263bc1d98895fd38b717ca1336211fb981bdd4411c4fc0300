I"?'<p>The various Markdown renderers supported by Jekyll sometimes have extra options
available.</p>

<h3 id="kramdown">Kramdown</h3>

<p>Kramdown is the default Markdown renderer for Jekyll. Below is a list of the
currently supported options:</p>

<ul>
  <li><strong>auto_id_prefix</strong> - Prefix used for automatically generated header IDs</li>
  <li><strong>auto_id_stripping</strong> - Strip all formatting from header text for automatic ID generation</li>
  <li><strong>auto_ids</strong> - Use automatic header ID generation</li>
  <li><strong>coderay_bold_every</strong> - Defines how often a line number should be made bold</li>
  <li><strong>coderay_css</strong> - Defines how the highlighted code gets styled</li>
  <li><strong>coderay_default_lang</strong> - Sets the default language for highlighting code blocks</li>
  <li><strong>coderay_line_number_start</strong> - The start value for the line numbers</li>
  <li><strong>coderay_line_numbers</strong> - Defines how and if line numbers should be shown</li>
  <li><strong>coderay_tab_width</strong> - The tab width used in highlighted code</li>
  <li><strong>coderay_wrap</strong> - Defines how the highlighted code should be wrapped</li>
  <li><strong>enable_coderay</strong> - Use coderay for syntax highlighting</li>
  <li><strong>entity_output</strong> - Defines how entities are output</li>
  <li><strong>footnote_backlink</strong> - Defines the text that should be used for the footnote backlinks</li>
  <li><strong>footnote_backlink_inline</strong> - Specifies whether the footnote backlink should always be inline</li>
  <li><strong>footnote_nr</strong> - The number of the first footnote</li>
  <li><strong>gfm_quirks</strong> - Enables a set of GFM specific quirks</li>
  <li><strong>hard_wrap</strong> - Interprets line breaks literally</li>
  <li><strong>header_offset</strong> - Sets the output offset for headers</li>
  <li><strong>html_to_native</strong> - Convert HTML elements to native elements</li>
  <li><strong>line_width</strong> - Defines the line width to be used when outputting a document</li>
  <li><strong>link_defs</strong> - Pre-defines link definitions</li>
  <li><strong>math_engine</strong> - Set the math engine</li>
  <li><strong>math_engine_opts</strong> - Set the math engine options</li>
  <li><strong>parse_block_html</strong> - Process kramdown syntax in block HTML tags</li>
  <li><strong>parse_span_html</strong> - Process kramdown syntax in span HTML tags</li>
  <li><strong>smart_quotes</strong> - Defines the HTML entity names or code points for smart quote output</li>
  <li><strong>syntax_highlighter</strong> - Set the syntax highlighter</li>
  <li><strong>syntax_highlighter_opts</strong> - Set the syntax highlighter options</li>
  <li><strong>toc_levels</strong> - Defines the levels that are used for the table of contents</li>
  <li><strong>transliterated_header_ids</strong> - Transliterate the header text before generating the ID</li>
  <li><strong>typographic_symbols</strong> - Defines a mapping from typographical symbol to output characters</li>
</ul>

<h3 id="example-usage">Example Usage</h3>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">kramdown</span><span class="pi">:</span>
  <span class="na">html_to_native</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<div class="note warning">
  <h5>There are two unsupported kramdown options</h5>
  <p>
    Please note that both <code>remove_block_html_tags</code> and
    <code>remove_span_html_tags</code> are currently unsupported in Jekyll due
    to the fact that they are not included within the kramdown HTML converter.
  </p>
</div>

<p>For more details about these options have a look at the <a href="https://kramdown.gettalong.org/options.html">Kramdown configuration documentation</a>.</p>

<h3 id="commonmark">CommonMark</h3>

<p><a href="https://commonmark.org/">CommonMark</a> is a rationalized version of Markdown syntax, implemented in C and thus faster than default Kramdown implemented in Ruby. It <a href="https://github.com/commonmark/CommonMark#differences-from-original-markdown">slightly differs</a> from original Markdown and does not support all the syntax elements implemented in Kramdown, like <a href="https://kramdown.gettalong.org/syntax.html#block-ials">Block Inline Attribute Lists</a>.</p>

<p>It comes in two flavors: basic CommonMark with <a href="https://github.com/jekyll/jekyll-commonmark">jekyll-commonmark</a> plugin and <a href="https://github.com/github/jekyll-commonmark-ghpages">GitHub Flavored Markdown supported by GitHub Pages</a>.</p>

<h3 id="redcarpet">Redcarpet</h3>

<p>Redcarpet can be configured by providing an <code class="language-plaintext highlighter-rouge">extensions</code> sub-setting, whose
value should be an array of strings. Each string should be the name of one of
the <code class="language-plaintext highlighter-rouge">Redcarpet::Markdown</code> class’s extensions; if present in the array, it will
set the corresponding extension to <code class="language-plaintext highlighter-rouge">true</code>.</p>

<p>Jekyll handles two special Redcarpet extensions:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">no_fenced_code_blocks</code> — By default, Jekyll sets the <code class="language-plaintext highlighter-rouge">fenced_code_blocks</code>
extension (for delimiting code blocks with triple tildes or triple backticks)
to <code class="language-plaintext highlighter-rouge">true</code>, probably because GitHub’s eager adoption of them is starting to make
them inescapable. Redcarpet’s normal <code class="language-plaintext highlighter-rouge">fenced_code_blocks</code> extension is inert
when used with Jekyll; instead, you can use this inverted version of the
extension for disabling fenced code.</li>
</ul>

<p>Note that you can also specify a language for highlighting after the first
delimiter:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```ruby
# ...ruby code
```
</code></pre></div></div>

<p>With both fenced code blocks and highlighter enabled, this will statically
highlight the code; without any syntax highlighter, it will add a
<code class="language-plaintext highlighter-rouge">class="LANGUAGE"</code> attribute to the <code class="language-plaintext highlighter-rouge">&lt;code&gt;</code> element, which can be used as a
hint by various JavaScript code highlighting libraries.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">smart</code> — This pseudo-extension turns on SmartyPants, which converts
straight quotes to curly quotes and runs of hyphens to em (<code class="language-plaintext highlighter-rouge">---</code>) and en (<code class="language-plaintext highlighter-rouge">--</code>) dashes.</li>
</ul>

<p>All other extensions retain their usual names from Redcarpet, and no renderer
options aside from <code class="language-plaintext highlighter-rouge">smart</code> can be specified in Jekyll. <a href="https://github.com/vmg/redcarpet/blob/v3.2.2/README.markdown#and-its-like-really-simple-to-use">A list of available
extensions can be found in the Redcarpet README file.</a>
Make sure you’re looking at the README for the right version of
Redcarpet: Jekyll currently uses v3.2.x. The most commonly used
extensions are:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">tables</code></li>
  <li><code class="language-plaintext highlighter-rouge">no_intra_emphasis</code></li>
  <li><code class="language-plaintext highlighter-rouge">autolink</code></li>
</ul>

<h3 id="custom-markdown-processors">Custom Markdown Processors</h3>

<p>If you’re interested in creating a custom markdown processor, you’re in luck! Create a new class in the <code class="language-plaintext highlighter-rouge">Jekyll::Converters::Markdown</code> namespace:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Jekyll::Converters::Markdown::MyCustomProcessor</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
    <span class="nb">require</span> <span class="s1">'funky_markdown'</span>
    <span class="vi">@config</span> <span class="o">=</span> <span class="n">config</span>
  <span class="k">rescue</span> <span class="no">LoadError</span>
    <span class="no">STDERR</span><span class="p">.</span><span class="nf">puts</span> <span class="s1">'You are missing a library required for Markdown. Please run:'</span>
    <span class="no">STDERR</span><span class="p">.</span><span class="nf">puts</span> <span class="s1">'  $ [sudo] gem install funky_markdown'</span>
    <span class="k">raise</span> <span class="no">FatalException</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"Missing dependency: funky_markdown"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
    <span class="o">::</span><span class="no">FunkyMarkdown</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">content</span><span class="p">).</span><span class="nf">convert</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Once you’ve created your class and have it properly set up either as a plugin
in the <code class="language-plaintext highlighter-rouge">_plugins</code> folder or as a gem, specify it in your <code class="language-plaintext highlighter-rouge">_config.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">markdown</span><span class="pi">:</span> <span class="s">MyCustomProcessor</span>
</code></pre></div></div>
:ET